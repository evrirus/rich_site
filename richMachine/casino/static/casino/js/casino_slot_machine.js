$(function () {
    "use strict";

    const items = [
        "üç≠", "ü¶Ñ", "üíµ", "ü¶ñ", "üëª"
    ];
    const $form = $('#userForm');
    const $mainButton = $('#submit_bid');
    const $buttonx05 = $('#bid__x05');
    const $buttonx2 = $('#bid__x2');
    const $buttonVaBank = $('#bid__vabank');
    const $freeSpin = $('#bid__freespin');
    const $inputBid = $('#input__bid');

    const $doors = $(".door");
    let isSpinning = false;

    $form.on('submit', function (event) {

        const submitter = event.originalEvent.submitter; // –ü–æ–ª—É—á–∞–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
        let bid = $inputBid.val();
        console.log(bid);

        if ($(submitter).is($buttonx05)) {
            bid = setBidValue(Math.floor(bid / 2));

        } else if ($(submitter).is($buttonx2)) {
            bid = setBidValue(Math.floor(bid * 2));

        } else if ($(submitter).is($buttonVaBank)) {
            // –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–ê–ë–ê–ù–ö", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 'vabank', –Ω–æ –∏–Ω–ø—É—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            bid = setBidValue(bid, 'vabank');

        } else if ($(submitter).is($freeSpin)) {
            bid = setBidValue(bid, 'freespin');
        } else {
            console.log('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É');
        }


        event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (isSpinning) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        isSpinning = true;

        const formData = $form.serializeArray();

        formData.push({ name: 'bid', value: bid });
        console.log(formData);

        // –ó–∞–ø—Ä–æ—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        fetchCombinationFromServer(formData).then(combination => {
            if (!combination) {
                isSpinning = false;
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            init(false);

            const duration = parseFloat(getComputedStyle($doors[0].querySelector(".boxes")).transitionDuration) * 1000;
            const delay = 200; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

            // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            $doors.each(function (index, door) {
                setTimeout(() => {
                    const $boxes = $(door).find(".boxes");
                    $boxes.css({
                        transition: "transform 1s ease-out",
                        transform: `translateY(-${$(door).height() * ($boxes.children().length - 1)}px)`
                    });
                }, index * delay);
            });

            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
            setTimeout(() => {
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                $doors.each(function (index, door) {
                    const $boxes = $(door).find(".boxes");
                    const $box = $("<div>", {
                        class: "box",
                        text: combination[index]
                    }).css({
                        width: $(door).width() + "px",
                        height: $(door).height() + "px"
                    });
                    $boxes.append($box);
                    $boxes.css({
                        transform: `translateY(-${$(door).height() * ($boxes.children().length - 1)}px)`
                    });
                });

                isSpinning = false;
            }, duration + delay * ($doors.length - 1));
        });
    });

    function setBidValue(value, type=null) {
        console.log(value, type);

        if (type === 'vabank') {
            return type;
        }
        if (type === 'freespin') {
            return type
        }

        $('#input__bid').val(value);
        return value;

    }

    function fetchCombinationFromServer(formData) {

        return $.ajax({
            url: '/api/slot/generate/',
            method: 'POST',
            headers: {
                'X-CSRFToken': $('[name=csrfmiddlewaretoken]').val()
            },
            data: formData,
            dataType: 'json'
        }).then(response => {
            console.log(response);
            if (response.combination) {
                return response.combination;
            } else {
                return null;
            }
        }).catch(() => console.log('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }

    function init(firstInit = true) {
        $doors.each(function () {
            const $door = $(this);
            const $boxes = $door.find(".boxes");
            const $boxesClone = $("<div>", { class: "boxes" });
            $(".info").html(`<span class="smile">${items.join("</span> <span class=\"smile\">")}</span>`);

            let pool = [];

            if (firstInit) {
                // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
                for (let i = 0; i < 20; i++) {
                    pool.push("‚ùì");
                }
            } else {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                for (let i = 0; i < 20; i++) {
                    pool.push(...items);
                }
                // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                pool = shuffle(pool);
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            const shuffledItems = shuffle(pool);

            shuffledItems.forEach(item => {
                const $box = $("<div>", {
                    class: "box",
                    text: item
                }).css({
                    width: $door.width() + "px",
                    height: $door.height() + "px"
                });
                $boxesClone.append($box);
            });

            $boxesClone.css({
                transition: "none",
                transform: `translateY(0px)`
            });
            $door.find(".boxes").replaceWith($boxesClone);
        });
    }

    function shuffle(arr) {
        let m = arr.length;
        while (m) {
            const i = Math.floor(Math.random() * m--);
            [arr[m], arr[i]] = [arr[i], arr[m]];
        }
        return arr;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    init();
});
