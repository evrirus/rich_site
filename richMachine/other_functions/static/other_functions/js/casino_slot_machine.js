function handleMessages(messages) {
    const container = $('#messages-container');
    messages.forEach(function(message) {
        const parts = message.message.split('|');
        const alertClass = 'alert-' + message.level;
        let alert = $('<div class="alert ' + alertClass + '"></div>');

        if (parts.length > 1) {
            alert.append('<strong>' + parts[0] + '</strong><br>' + parts[1]);
        } else {
            alert.text(message.message);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.prepend(alert);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            alert.fadeOut(500, function() {
                $(this).remove();
            });
        }, 5000);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

(async function () {
    "use strict";

    const items = [
        "üç≠", "ü¶Ñ", "üíµ", "ü¶ñ", "üëª"
    ];
    const form = document.getElementById('userForm');
    const doors = document.querySelectorAll(".door");
    let isSpinning = false;

    document.getElementById('userForm').addEventListener('submit', async function (event) {
        event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (isSpinning) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        isSpinning = true;

        const formData = new FormData(form);

        // –ó–∞–ø—Ä–æ—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const combination = await fetchCombinationFromServer(formData);
        if (!combination) {
            isSpinning = false;
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        init(false);

        const duration = parseFloat(getComputedStyle(doors[0].querySelector(".boxes")).transitionDuration) * 1000;
        const delay = 200; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        doors.forEach((door, index) => {
            setTimeout(() => {
                const boxes = door.querySelector(".boxes");
                boxes.style.transition = "transform 1s ease-out";
                boxes.style.transform = `translateY(-${door.clientHeight * (boxes.childElementCount - 1)}px)`;
            }, index * delay);
        });

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        await new Promise(resolve => setTimeout(resolve, duration + delay * (doors.length - 1)));

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        doors.forEach((door, index) => {
            const boxes = door.querySelector(".boxes");
            const box = document.createElement("div");
            box.classList.add("box");
            box.style.width = door.clientWidth + "px";
            box.style.height = door.clientHeight + "px";
            box.textContent = combination[index];
            boxes.appendChild(box);
            boxes.style.transform = `translateY(-${door.clientHeight * (boxes.childElementCount - 1)}px)`;
        });

        isSpinning = false;
    });

    async function fetchCombinationFromServer(formData) {
        try {
            const formDataObj = Object.fromEntries(formData.entries());
 
            const response = await fetch('generate_combination/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify(formDataObj)
            });

            const data = await response.json();

            if (data.combination) {
                handleMessages(data.messages)
                return data.combination;
            } else {
                handleMessages(data.messages)
                return null;
            }
        } catch (error) {
            return null;
        }
    }

    function init(firstInit = true) {
        doors.forEach(door => {
            const boxes = door.querySelector(".boxes");
            const boxesClone = document.createElement("div");
            boxesClone.className = "boxes";
            document.querySelector(".info").textContent = `${items.join(" ")}`;

            let pool = [];

            if (firstInit) {
                // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
                for (let i = 0; i < 20; i++) { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                    pool.push("‚ùì");
                }
            } else {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                for (let i = 0; i < 20; i++) { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                    pool.push(...items);
                }
                // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                pool = shuffle(pool);
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            const shuffledItems = shuffle(pool);

            shuffledItems.forEach(item => {
                const box = document.createElement("div");
                box.classList.add("box");
                box.style.width = door.clientWidth + "px";
                box.style.height = door.clientHeight + "px";
                box.textContent = item;
                boxesClone.appendChild(box);
            });

            boxesClone.style.transition = "none"; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            boxesClone.style.transform = `translateY(0px)`;
            door.replaceChild(boxesClone, boxes);
        });
    }

    function getVisibleSymbol(door) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const visibleBox = door.querySelector(".boxes .box:last-child");
        return visibleBox ? visibleBox.textContent : "‚ùì";
    }

    function shuffle(arr) {
        let m = arr.length;
        while (m) {
            const i = Math.floor(Math.random() * m--);
            [arr[m], arr[i]] = [arr[i], arr[m]];
        }
        return arr;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    init();
})();
